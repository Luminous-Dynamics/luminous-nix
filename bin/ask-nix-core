#!/usr/bin/env python3
"""
Example of ask-nix using the headless core engine
This shows how to migrate from the monolithic script to the modular architecture
"""

import sys
import argparse
from pathlib import Path

# Add src to path
src_path = Path(__file__).parent.parent / "src"
sys.path.insert(0, str(src_path))

from nix_humanity.adapters.cli_adapter import CLIAdapter


def main():
    """Main entry point for the CLI"""
    
    parser = argparse.ArgumentParser(
        description="Nix for Humanity - Natural language interface for NixOS"
    )
    
    # Query argument
    parser.add_argument(
        'query',
        nargs='*',
        help='Natural language query (e.g., "install firefox")'
    )
    
    # Personality options
    parser.add_argument(
        '--minimal', 
        action='store_const', 
        const='minimal',
        dest='personality',
        help='Just the facts'
    )
    parser.add_argument(
        '--friendly',
        action='store_const',
        const='friendly', 
        dest='personality',
        help='Warm and helpful (default)'
    )
    parser.add_argument(
        '--encouraging',
        action='store_const',
        const='encouraging',
        dest='personality', 
        help='Supportive for beginners'
    )
    parser.add_argument(
        '--technical',
        action='store_const',
        const='technical',
        dest='personality',
        help='Detailed explanations'
    )
    parser.add_argument(
        '--symbiotic',
        action='store_const',
        const='symbiotic',
        dest='personality',
        help='Co-evolutionary mode'
    )
    
    # Execution options
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Show what would happen without executing'
    )
    parser.add_argument(
        '--no-execute',
        action='store_true',
        help='Explain but do not execute commands'
    )
    parser.add_argument(
        '--show-intent',
        action='store_true',
        help='Show detected intent'
    )
    
    # Special commands
    parser.add_argument(
        '--stats',
        action='store_true',
        help='Show system statistics'
    )
    
    args = parser.parse_args()
    
    # Initialize adapter
    adapter = CLIAdapter()
    
    # Handle special commands
    if args.stats:
        adapter.get_stats()
        return
        
    # Handle query
    if not args.query:
        print("üó£Ô∏è  Nix for Humanity - Natural Language NixOS Interface")
        print("\nUsage: ask-nix-core 'your question'")
        print("\nExamples:")
        print("  ask-nix-core 'install firefox'")
        print("  ask-nix-core 'update my system'")
        print("  ask-nix-core 'my wifi isn't working'")
        print("\nFor more options: ask-nix-core --help")
        return
        
    # Process query
    query_text = ' '.join(args.query)
    
    # Set personality if specified
    if args.personality:
        adapter.set_personality(args.personality)
        
    # Process and display
    response = adapter.process_query(
        query_text,
        personality=args.personality,
        dry_run=args.dry_run,
        execute=not args.no_execute,
        show_intent=args.show_intent
    )
    
    adapter.display_response(response)


if __name__ == "__main__":
    main()