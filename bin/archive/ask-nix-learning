#!/usr/bin/env python3
"""
ask-nix-learning - Learning mode implementation for users like Carlos

Provides step-by-step guidance with examples for every command,
integrated with our adaptive response system.
"""

import sys
import os
import json
from pathlib import Path

# Add scripts directory to path for imports
script_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'scripts'))
sys.path.insert(0, script_dir)

# Import our modules
from nix_knowledge_engine import NixOSKnowledgeEngine
from learning_mode_engine import LearningModeEngine, LearningModule
from adaptive_response_formatter import AdaptiveResponseFormatter

class LearningModeInterface:
    """Combines learning mode with adaptive responses"""
    
    def __init__(self):
        self.knowledge = NixOSKnowledgeEngine()
        self.learning = LearningModeEngine()
        self.adaptive = AdaptiveResponseFormatter()
        
        # Track learning state
        self.state_file = Path.home() / '.nix-for-humanity' / 'learning-state.json'
        self.state_file.parent.mkdir(exist_ok=True)
        self.learning_state = self._load_state()
        
    def _load_state(self) -> dict:
        """Load saved learning state"""
        if self.state_file.exists():
            try:
                with open(self.state_file, 'r') as f:
                    return json.load(f)
            except:
                pass
        return {
            'current_module': None,
            'current_step': 1,
            'completed_modules': [],
            'user_level': 'beginner'
        }
    
    def _save_state(self):
        """Save learning state"""
        with open(self.state_file, 'w') as f:
            json.dump(self.learning_state, f, indent=2)
    
    def process_query(self, query: str) -> str:
        """Process user query in learning mode"""
        query_lower = query.lower()
        
        # Check for navigation commands
        if 'next step' in query_lower or 'continue' in query_lower:
            return self._next_step()
        elif 'previous step' in query_lower or 'go back' in query_lower:
            return self._previous_step()
        elif 'start over' in query_lower or 'restart' in query_lower:
            return self._restart_module()
        elif 'practice' in query_lower or 'exercise' in query_lower:
            return self._show_practice()
        elif 'help' in query_lower and self.learning_state['current_module']:
            return self._show_troubleshooting()
        
        # Extract intent for new queries
        intent = self.knowledge.extract_intent(query)
        
        # Get learning module for this intent
        module = self.learning.get_learning_module(intent['action'])
        if not module:
            # Fall back to regular knowledge base
            solution = self.knowledge.get_solution(intent)
            response = self.knowledge.format_response(intent, solution)
            
            # Add learning suggestion
            response += "\n\n💡 **Want to learn more?** Try asking:\n"
            response += "- 'teach me how to install packages'\n"
            response += "- 'show me step by step how to update'\n"
            response += "- 'I want to learn about rollbacks'"
            
            # Apply adaptive formatting
            adapted, _ = self.adaptive.adapt_response(query, response, intent['action'])
            return adapted
        
        # Start new learning module
        self.learning_state['current_module'] = intent['action']
        self.learning_state['current_step'] = 1
        self._save_state()
        
        # Format the learning module
        response = self.learning.format_step_by_step(
            module, 
            current_step=self.learning_state['current_step']
        )
        
        # Apply adaptive formatting
        adapted, _ = self.adaptive.adapt_response(query, response, 'learning')
        return adapted
    
    def _next_step(self) -> str:
        """Move to next step in current module"""
        if not self.learning_state['current_module']:
            return "No active learning module. Ask me what you'd like to learn!"
        
        module = self.learning.get_learning_module(self.learning_state['current_module'])
        if not module:
            return "Error loading learning module."
        
        # Increment step
        if self.learning_state['current_step'] < len(module.steps):
            self.learning_state['current_step'] += 1
        else:
            # Module complete!
            self.learning_state['completed_modules'].append(self.learning_state['current_module'])
            response = f"🎉 **Congratulations!** You've completed the {module.title} module!\n\n"
            response += self.learning.format_practice_section(module)
            self.learning_state['current_module'] = None
            self._save_state()
            return response
        
        self._save_state()
        
        # Show next step
        response = self.learning.format_step_by_step(
            module,
            current_step=self.learning_state['current_step']
        )
        
        # Apply adaptive formatting
        adapted, _ = self.adaptive.adapt_response("next step", response, 'learning')
        return adapted
    
    def _previous_step(self) -> str:
        """Go back to previous step"""
        if not self.learning_state['current_module']:
            return "No active learning module."
        
        module = self.learning.get_learning_module(self.learning_state['current_module'])
        if not module:
            return "Error loading learning module."
        
        # Decrement step
        if self.learning_state['current_step'] > 1:
            self.learning_state['current_step'] -= 1
        
        self._save_state()
        
        # Show previous step
        response = self.learning.format_step_by_step(
            module,
            current_step=self.learning_state['current_step']
        )
        
        # Apply adaptive formatting
        adapted, _ = self.adaptive.adapt_response("previous step", response, 'learning')
        return adapted
    
    def _restart_module(self) -> str:
        """Restart current module from beginning"""
        if not self.learning_state['current_module']:
            return "No active learning module to restart."
        
        module = self.learning.get_learning_module(self.learning_state['current_module'])
        if not module:
            return "Error loading learning module."
        
        # Reset to step 1
        self.learning_state['current_step'] = 1
        self._save_state()
        
        response = "↺ **Starting over from the beginning...**\n\n"
        response += self.learning.format_step_by_step(
            module,
            current_step=1
        )
        
        # Apply adaptive formatting
        adapted, _ = self.adaptive.adapt_response("restart", response, 'learning')
        return adapted
    
    def _show_practice(self) -> str:
        """Show practice exercises for current module"""
        if not self.learning_state['current_module']:
            # Show completed modules practice
            if self.learning_state['completed_modules']:
                response = "🎯 **Practice Exercises from Completed Modules:**\n\n"
                for module_name in self.learning_state['completed_modules']:
                    module = self.learning.get_learning_module(module_name)
                    if module:
                        response += f"### {module.title}\n"
                        for exercise in module.practice_exercises[:2]:
                            response += f"- {exercise}\n"
                        response += "\n"
                return response
            else:
                return "Complete a learning module first to unlock practice exercises!"
        
        module = self.learning.get_learning_module(self.learning_state['current_module'])
        if not module:
            return "Error loading learning module."
        
        return self.learning.format_practice_section(module)
    
    def _show_troubleshooting(self) -> str:
        """Show troubleshooting help for current module"""
        if not self.learning_state['current_module']:
            return "No active learning module."
        
        module = self.learning.get_learning_module(self.learning_state['current_module'])
        if not module:
            return "Error loading learning module."
        
        response = f"🛠️ **Troubleshooting Help for {module.title}**\n\n"
        response += "**Common Issues:**\n"
        for problem, solution in module.troubleshooting.items():
            response += f"• **{problem}**: {solution}\n"
        
        response += "\n💡 If you're still stuck, try:\n"
        response += "- Going back a step with 'previous step'\n"
        response += "- Starting over with 'restart'\n"
        response += "- Asking a specific question about your error"
        
        return response
    
    def get_status(self) -> str:
        """Get current learning status"""
        status = "📚 **Your Learning Progress**\n\n"
        
        if self.learning_state['current_module']:
            module = self.learning.get_learning_module(self.learning_state['current_module'])
            if module:
                status += f"**Currently Learning**: {module.title}\n"
                status += f"**Progress**: Step {self.learning_state['current_step']} of {len(module.steps)}\n"
                progress_pct = (self.learning_state['current_step'] / len(module.steps)) * 100
                status += f"**Completion**: {progress_pct:.0f}%\n"
        else:
            status += "**No active module**\n"
        
        if self.learning_state['completed_modules']:
            status += f"\n**Completed Modules** ({len(self.learning_state['completed_modules'])}):\n"
            for module_name in self.learning_state['completed_modules']:
                module = self.learning.get_learning_module(module_name)
                if module:
                    status += f"✅ {module.title}\n"
        
        status += "\n**Available Learning Modules:**\n"
        status += "- Installing software (try: 'teach me to install')\n"
        status += "- Updating system (try: 'how do I update step by step')\n"
        status += "- Removing packages (try: 'learn to uninstall')\n"
        status += "- Searching packages (try: 'show me how to search')\n"
        status += "- System rollback (try: 'teach rollback')\n"
        status += "- Checking status (try: 'learn system status')\n"
        
        return status


def main():
    if len(sys.argv) < 2:
        interface = LearningModeInterface()
        print(interface.get_status())
        print("\n💡 **Usage**: ask-nix-learning 'your question'")
        print("\n**Examples:**")
        print("  ask-nix-learning 'teach me how to install firefox'")
        print("  ask-nix-learning 'show me step by step updates'")
        print("  ask-nix-learning 'next step'")
        print("  ask-nix-learning 'practice exercises'")
        sys.exit(0)
    
    # Process query
    query = ' '.join(sys.argv[1:])
    interface = LearningModeInterface()
    response = interface.process_query(query)
    print(response)


if __name__ == "__main__":
    main()