#!/usr/bin/env python3
"""
Ask Nix v3 - The ONE WORKING COMMAND for Phase 0
This version ACTUALLY executes NixOS commands
"""

import sys
import os
import argparse
import subprocess
from pathlib import Path

# Add scripts directory to path for imports
script_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'scripts'))
sys.path.insert(0, script_dir)

# Import our knowledge engine
from nix_knowledge_engine import NixOSKnowledgeEngine

class SimpleNixExecutor:
    """Simple executor that ACTUALLY runs commands"""
    
    def __init__(self, dry_run=True):
        self.dry_run = dry_run
        
    def execute_command(self, cmd_list):
        """Execute a command with proper error handling"""
        try:
            if self.dry_run:
                print(f"üèÉ DRY RUN - Would execute: {' '.join(cmd_list)}")
                return {'success': True, 'message': 'Dry run successful'}
            else:
                print(f"üöÄ Executing: {' '.join(cmd_list)}")
                result = subprocess.run(cmd_list, capture_output=True, text=True)
                
                if result.returncode == 0:
                    return {
                        'success': True,
                        'message': 'Command executed successfully',
                        'output': result.stdout
                    }
                else:
                    return {
                        'success': False,
                        'message': 'Command failed',
                        'error': result.stderr
                    }
        except Exception as e:
            return {
                'success': False,
                'message': 'Execution error',
                'error': str(e)
            }
    
    def install_package(self, package):
        """Install a package using nix-env"""
        # Map common names to actual packages
        package_map = {
            'firefox': 'firefox',
            'chrome': 'google-chrome',
            'vscode': 'vscode',
            'vim': 'vim',
            'emacs': 'emacs',
            'python': 'python3',
            'nodejs': 'nodejs'
        }
        
        actual_package = package_map.get(package.lower(), package)
        cmd = ['nix-env', '-iA', f'nixos.{actual_package}']
        
        return self.execute_command(cmd)

class AskNixV3:
    """The working implementation for Phase 0"""
    
    def __init__(self, execute=False, dry_run=True):
        self.knowledge = NixOSKnowledgeEngine()
        self.executor = SimpleNixExecutor(dry_run=dry_run)
        self.should_execute = execute
        
    def process(self, query):
        """Process natural language and optionally execute"""
        
        # Extract intent
        intent = self.knowledge.extract_intent(query)
        print(f"üéØ Intent: {intent['action']}")
        
        # Get solution from knowledge base
        solution = self.knowledge.get_solution(intent)
        
        # Format and display response
        response = self.knowledge.format_response(intent, solution)
        print("\n" + response)
        
        # Execute if requested
        if self.should_execute and intent['action'] == 'install_package':
            package = intent.get('package')
            if package:
                print("\n" + "="*50)
                print(f"üí´ Preparing to install {package}...")
                result = self.executor.install_package(package)
                
                if result['success']:
                    print(f"‚úÖ {result['message']}")
                    if 'output' in result:
                        print(f"üìã Output: {result['output'][:200]}...")
                else:
                    print(f"‚ùå {result['message']}")
                    if 'error' in result:
                        print(f"üìã Error: {result['error']}")
            else:
                print("‚ùå Could not determine which package to install")

def main():
    parser = argparse.ArgumentParser(description='Ask Nix v3 - Natural Language NixOS Interface')
    parser.add_argument('query', nargs='*', help='Your natural language query')
    parser.add_argument('--execute', action='store_true', help='Actually execute commands')
    parser.add_argument('--no-dry-run', action='store_true', help='Disable dry-run mode (USE WITH CAUTION)')
    parser.add_argument('--force', action='store_true', help='Skip confirmation prompts (USE WITH EXTREME CAUTION)')
    
    args = parser.parse_args()
    
    if not args.query:
        print("Usage: ask-nix-v3 'your question'")
        print("\nExamples:")
        print("  ask-nix-v3 'install firefox'")
        print("  ask-nix-v3 --execute 'install firefox'  # Actually installs")
        print("  ask-nix-v3 --execute --no-dry-run 'install firefox'  # REAL installation")
        sys.exit(1)
    
    query = ' '.join(args.query)
    dry_run = not args.no_dry_run
    
    # Safety warning for real execution
    if args.execute and not dry_run and not args.force:
        print("‚ö†Ô∏è  WARNING: Real execution mode - commands WILL modify your system!")
        response = input("Continue? (y/N): ")
        if response.lower() != 'y':
            print("Aborted.")
            sys.exit(0)
    
    # Create and run assistant
    assistant = AskNixV3(execute=args.execute, dry_run=dry_run)
    assistant.process(query)

if __name__ == "__main__":
    main()