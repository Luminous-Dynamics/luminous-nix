#!/usr/bin/env node
/**
 * nix-humanity - Simple CLI for Nix for Humanity
 * Uses the existing nodejs-mvp implementation directly
 */

const path = require('path');

// Get the absolute paths
const projectRoot = path.resolve(__dirname, '..');
const mvpDir = path.join(projectRoot, 'implementations', 'nodejs-mvp');

// Parse command line arguments
const args = process.argv.slice(2);
const helpFlags = ['-h', '--help', 'help'];
const executeFlags = ['-e', '--execute'];
const verboseFlags = ['-v', '--verbose'];

// Check for flags
const showHelp = args.some(arg => helpFlags.includes(arg));
const execute = args.some(arg => executeFlags.includes(arg));
const verbose = args.some(arg => verboseFlags.includes(arg));

// Get the actual command (non-flag arguments)
const command = args.filter(arg => !arg.startsWith('-')).join(' ');

if (showHelp || !command) {
  console.log(`
🗣️  Nix for Humanity - Natural Language NixOS Interface

Usage:
  nix-humanity <command> [options]

Examples:
  nix-humanity search firefox
  nix-humanity install neovim
  nix-humanity install neovim --execute
  nix-humanity update system --execute

Options:
  -h, --help      Show this help message
  -e, --execute   Actually run the command (default is dry-run)
  -v, --verbose   Show detailed output

Safety:
  Commands run in dry-run mode by default.
  Add --execute to actually run them.

Common Commands:
  search <package>    Find packages
  install <package>   Install a package
  remove <package>    Remove a package
  update system       Update NixOS
  list packages       Show installed packages
  clean up            Garbage collect
`);
  process.exit(0);
}

// Set dry-run mode BEFORE loading modules
process.env.DRY_RUN = execute ? 'false' : 'true';

// NOW load the modules after setting environment
const IntentEngine = require(path.join(mvpDir, 'services', 'intent-engine.js'));
const realExecutor = require(path.join(mvpDir, 'services', 'real-executor.js'));

// Create an instance of the intent engine
const intentEngine = new IntentEngine();

async function main() {
  try {
    // Show mode
    if (!execute) {
      console.log('🔒 Running in DRY-RUN mode (use --execute to run for real)');
    } else {
      console.log('⚠️  Running in EXECUTE mode - commands will run for real!');
    }
    console.log();

    // Process the intent
    console.log(`🔍 Processing: "${command}"`);
    const intent = await intentEngine.recognize(command);

    if (!intent.action) {
      console.log('❌ I didn\'t understand that command.');
      if (intent.suggestions && intent.suggestions.length > 0) {
        console.log('\n💡 Try one of these:');
        intent.suggestions.forEach(s => console.log(`   - ${s}`));
      }
      process.exit(1);
    }

    // Show what we understood
    if (verbose) {
      console.log(`\n🎯 Intent: ${intent.action}`);
      if (intent.package) console.log(`📦 Package: ${intent.package}`);
      if (intent.service) console.log(`🔧 Service: ${intent.service}`);
      console.log(`📊 Confidence: ${Math.round(intent.confidence * 100)}%`);
    }

    // Execute the command
    // The intent has a 'package' field, not 'target'
    const args = intent.package ? [intent.package] :
                 intent.service ? [intent.service] :
                 [];
    const result = await realExecutor.execute(intent.action, args);

    // Display results
    console.log();
    if (result.success) {
      console.log('✅', result.output);

      if (result.command && (verbose || !execute)) {
        console.log(`\n🔧 Command: ${result.command}`);
      }
    } else {
      console.log('❌ Error:', result.error);
      if (result.suggestion) {
        console.log('💡', result.suggestion);
      }
    }

    process.exit(result.success ? 0 : 1);

  } catch (error) {
    console.error('❌ Error:', error.message);
    if (verbose) {
      console.error(error.stack);
    }
    process.exit(2);
  }
}

main();
