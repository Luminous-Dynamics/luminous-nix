#!/usr/bin/env python3
"""
Hybrid NixOS Assistant - Combines Knowledge Engine with LLM personality
The best of both worlds: accurate knowledge + natural conversation
Now with Symbiotic Intelligence feedback collection!
"""

import sys
import subprocess
from pathlib import Path
import os
import uuid
from datetime import datetime

# Add scripts directory to path
script_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'scripts'))
sys.path.insert(0, script_dir)

# Now import the modules
from nix_knowledge_engine import NixOSKnowledgeEngine
from feedback_collector import FeedbackCollector
from preference_learner import PreferenceLearner
from typing import Dict

class HybridNixAssistant:
    def __init__(self):
        self.knowledge = NixOSKnowledgeEngine()
        self.feedback = FeedbackCollector()
        self.learner = PreferenceLearner()
        self.personality = 'friendly'  # Can be: minimal, friendly, encouraging, technical
        self.session_id = str(uuid.uuid4())[:8]
        self.collect_feedback = True  # Can be disabled with --no-feedback
        self.adaptive_mode = False  # Enable adaptive responses based on preferences
        self.session_count = 0  # Track session interactions
        
        # Load adaptive parameters
        self.adaptive_params = self.learner.get_adaptive_response_params()
        
    def enhance_response(self, response: str, query: str, personality: str) -> str:
        """Add personality to the factual response"""
        
        # Use adaptive parameters if in adaptive mode
        if self.adaptive_mode and personality == 'adaptive':
            return self._adaptive_enhance(response, query)
        
        if personality == 'minimal':
            # Just return the facts
            return response
            
        elif personality == 'friendly':
            # Add warm greeting and closing
            enhanced = f"Hi there! {response}\n\nLet me know if you need any clarification! 😊"
            return enhanced
            
        elif personality == 'encouraging':
            # Add encouragement
            enhanced = f"Great question! {response}\n\nYou're doing awesome learning NixOS! Keep it up! 🌟"
            return enhanced
            
        elif personality == 'technical':
            # Add technical depth
            enhanced = f"{response}\n\nNote: This follows NixOS's declarative configuration paradigm."
            return enhanced
            
        elif personality == 'symbiotic':
            # New personality that admits uncertainty and invites partnership
            enhanced = f"{response}\n\n🤝 I'm still learning! Was this helpful? Your feedback helps me improve."
            return enhanced
            
        return response
    
    def _adaptive_enhance(self, response: str, query: str) -> str:
        """Enhance response based on learned preferences"""
        style = self.adaptive_params['style']
        complexity = self.adaptive_params['complexity']
        elements = self.adaptive_params['elements']
        
        # Build response based on preferences
        enhanced = response
        
        # Add greeting based on personality preference
        if self.learner.preferences.personality > 0.6:
            enhanced = f"Hi there! {enhanced}"
        
        # Add technical details if preferred
        if 'technical_details' in elements:
            enhanced += "\n\nTechnical note: This uses NixOS's functional package management."
        
        # Add step-by-step if preferred
        if 'step_by_step' in elements and 'install' in query.lower():
            enhanced += "\n\nStep-by-step:\n1. First, decide between declarative or imperative\n2. For declarative, edit configuration.nix\n3. Run nixos-rebuild switch\n4. Verify installation"
        
        # Add encouragement if preferred
        if 'encouragement' in elements:
            enhanced += "\n\nYou're making great progress with NixOS! 🌟"
        
        # Add suggestions if proactive
        if 'suggestions' in elements:
            enhanced += "\n\n💡 Next, you might want to explore home-manager for user-specific packages."
        
        # Adjust verbosity
        if self.learner.preferences.verbosity < 0.3:
            # Trim to essentials
            lines = enhanced.split('\n')
            enhanced = '\n'.join(lines[:3])  # Keep only first 3 lines
        
        return enhanced
        
    def answer(self, query: str, interactive: bool = True):
        """Process query through knowledge engine with personality"""
        
        # Run preference learning cycle periodically
        if self.adaptive_mode and self.session_count % 5 == 0:
            self.learner.run_learning_cycle()
            self.adaptive_params = self.learner.get_adaptive_response_params()
        
        # Step 1: Extract intent
        intent = self.knowledge.extract_intent(query)
        
        # Step 2: Get accurate solution
        solution = self.knowledge.get_solution(intent)
        
        # Step 3: Format response
        response = self.knowledge.format_response(intent, solution)
        
        # Step 4: Add personality (optional - could use LLM here)
        final_response = self.enhance_response(response, query, self.personality)
        
        # Step 5: Collect feedback if enabled and interactive
        if self.collect_feedback and interactive:
            self._gather_feedback(query, final_response, intent)
        
        # Increment session count
        self.session_count = getattr(self, 'session_count', 0) + 1
        
        return final_response
    
    def _gather_feedback(self, query: str, response: str, intent: Dict):
        """Gather user feedback for continuous improvement"""
        try:
            # Quick implicit feedback
            print("\n" + "=" * 50)
            helpful = input("Was this helpful? (y/n/skip): ").lower().strip()
            
            if helpful == 'skip' or helpful == '':
                # User chose to skip feedback
                return
            
            if helpful == 'n':
                # Collect improvement
                print("\nI'd love to learn how to help better!")
                improved = input("What would have been a better response? (or press Enter to skip): ").strip()
                
                if improved:
                    self.feedback.collect_explicit_feedback(
                        query=query,
                        response=response,
                        helpful=False,
                        improved_response=improved,
                        session_id=self.session_id
                    )
                    print("Thank you! I'll use this to improve.")
                else:
                    # Just record that it wasn't helpful
                    self.feedback.collect_explicit_feedback(
                        query=query,
                        response=response,
                        helpful=False,
                        session_id=self.session_id
                    )
            
            elif helpful == 'y':
                # Record positive feedback
                self.feedback.collect_explicit_feedback(
                    query=query,
                    response=response,
                    helpful=True,
                    rating=5,  # Implicit high rating for helpful
                    session_id=self.session_id
                )
                print("Great! Thank you for the feedback.")
            
            # Track usage pattern
            if intent['action'] == 'install_package' and intent.get('package'):
                self.feedback.track_usage_pattern(
                    action='install_package',
                    package=intent['package'],
                    success=True if helpful == 'y' else False,
                    session_id=self.session_id
                )
        
        except KeyboardInterrupt:
            # User interrupted feedback - that's OK
            pass
        except Exception as e:
            # Don't let feedback errors interrupt the main flow
            if os.getenv('DEBUG'):
                print(f"\nFeedback error: {e}")
        
    def set_personality(self, style: str):
        """Change response personality"""
        if style in ['minimal', 'friendly', 'encouraging', 'technical', 'symbiotic', 'adaptive']:
            self.personality = style
            if style == 'adaptive':
                self.adaptive_mode = True
                # Update adaptive parameters
                self.adaptive_params = self.learner.get_adaptive_response_params()

def main():
    if len(sys.argv) < 2:
        print("🗣️ Nix for Humanity - Natural Language NixOS Assistant")
        print("\nUsage: ask-nix-hybrid 'your question'")
        print("\nExamples:")
        print("  ask-nix-hybrid 'How do I install Firefox?'")
        print("  ask-nix-hybrid 'My WiFi stopped working'")
        print("\nPersonality Options:")
        print("  --minimal     Just the facts")
        print("  --friendly    Warm and helpful (default)")
        print("  --encouraging Supportive for beginners")
        print("  --technical   Detailed explanations")
        print("  --symbiotic   🧬 Co-evolutionary mode (admits uncertainty)")
        print("  --adaptive    🧠 Learn and adapt to your preferences")
        print("\nOther Options:")
        print("  --no-feedback Don't collect feedback")
        print("  --summary     Show feedback summary")
        print("  --preferences Show learned preferences")
        sys.exit(1)
    
    # Check for special commands
    if '--summary' in sys.argv:
        collector = FeedbackCollector()
        summary = collector.get_feedback_summary()
        print("\n📊 Feedback Summary:")
        print(f"Total feedback collected: {summary['total_feedback']}")
        print(f"Helpfulness rate: {summary['helpfulness_rate']:.1%}")
        print(f"Average rating: {summary['average_rating']:.1f}/5")
        print(f"Preferences collected: {summary['total_preferences']}")
        print(f"Usage patterns tracked: {summary['total_patterns']}")
        print(f"Success rate: {summary['success_rate']:.1%}")
        print(f"\nData location: {summary['data_path']}")
        sys.exit(0)
    
    if '--preferences' in sys.argv:
        learner = PreferenceLearner()
        prefs = learner.get_preference_summary()
        print("\n🧠 Learned Preferences:")
        print(f"Profile: {prefs['profile']}")
        print(f"Learning style: {prefs['learning_style']}")
        print(f"Technical level: {prefs['technical_level']}")
        print(f"Sessions analyzed: {prefs['session_count']}")
        print("\n📈 Detailed Preferences:")
        for dim, value in prefs['preferences'].items():
            bar = '█' * int(value * 20) + '░' * (20 - int(value * 20))
            print(f"  {dim:15} [{bar}] {value:.2f}")
        
        # Get adaptive parameters
        params = learner.get_adaptive_response_params()
        print(f"\n🎯 Response Configuration:")
        print(f"  Style: {params['style']}")
        print(f"  Complexity: {params['complexity']}")
        if params['elements']:
            print(f"  Elements: {', '.join(params['elements'])}")
        sys.exit(0)
    
    assistant = HybridNixAssistant()
    
    # Check for flags
    args = sys.argv[1:]
    
    # Check for no-feedback flag
    if '--no-feedback' in args:
        assistant.collect_feedback = False
        args = [arg for arg in args if arg != '--no-feedback']
    
    # Check for personality flags
    if args and args[0].startswith('--'):
        personality = args[0][2:]
        if personality not in ['no-feedback', 'summary']:
            assistant.set_personality(personality)
        args = args[1:]
    
    if not args:
        print("Error: No question provided")
        sys.exit(1)
        
    query = ' '.join(args)
    response = assistant.answer(query)
    print(response)

if __name__ == "__main__":
    main()