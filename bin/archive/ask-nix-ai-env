#!/usr/bin/env python3
"""
ask-nix-ai-env - AI Environment generation command for Nix for Humanity
Handles natural language requests to create AI/ML development environments
"""

import sys
import os
import argparse
from pathlib import Path

# Add scripts directory to path
script_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'scripts'))
sys.path.insert(0, script_dir)

from ai_environment_integration import AIEnvironmentIntegration
from ai_environment_generator import AIEnvironmentGenerator

def main():
    parser = argparse.ArgumentParser(
        description="Generate Nix flakes for AI/ML environments using natural language"
    )
    
    parser.add_argument('request', nargs='*', 
                       help='Natural language description of the environment you want')
    
    parser.add_argument('-o', '--output', default=None,
                       help='Output directory (default: auto-generated based on request)')
    
    parser.add_argument('-f', '--force', action='store_true',
                       help='Overwrite existing files')
    
    parser.add_argument('-p', '--preview', action='store_true',
                       help='Preview what would be created without generating files')
    
    parser.add_argument('-e', '--example', action='store_true',
                       help='Create an example Jupyter notebook')
    
    parser.add_argument('--personality', choices=['minimal', 'friendly', 'encouraging', 'technical'],
                       default='friendly', help='Response personality style')
    
    args = parser.parse_args()
    
    # Get request from args or stdin
    if args.request:
        request = ' '.join(args.request)
    else:
        print("ü§ñ AI Environment Architect - Nix for Humanity")
        print("=" * 50)
        print("Describe the AI/ML environment you need:")
        print("(e.g., 'I want to run Llama locally with CUDA support')")
        print()
        request = input("> ").strip()
    
    if not request:
        print("Error: No request provided")
        sys.exit(1)
    
    # Initialize components
    integration = AIEnvironmentIntegration()
    generator = AIEnvironmentGenerator()
    
    # Check if this is an AI environment request
    if not integration.is_environment_request(request):
        print("ü§î This doesn't seem to be an AI/ML environment request.")
        print("Try something like:")
        print("  - 'Create a PyTorch environment with CUDA'")
        print("  - 'Set up Jupyter notebook for machine learning'")
        print("  - 'I want to run stable diffusion locally'")
        sys.exit(1)
    
    # Handle the request
    response = integration.handle_environment_request(request, args.output)
    
    # Format and display the response
    formatted = integration.format_response(response, args.personality)
    print()
    print(formatted)
    
    if args.preview:
        print("\n" + "="*50)
        print("üìÑ Preview of flake.nix:")
        print("="*50)
        flake_content = response['files_to_create']['flake.nix']
        # Show first 40 lines
        lines = flake_content.split('\n')
        for i, line in enumerate(lines[:40]):
            print(f"{i+1:3} | {line}")
        if len(lines) > 40:
            print(f"... ({len(lines)-40} more lines)")
        return
    
    # Ask for confirmation
    print()
    confirm = input("üìÅ Create this environment? [Y/n] ").strip().lower()
    
    if confirm in ['', 'y', 'yes']:
        # Generate the files
        success, message = generator.create_environment(response, args.output, args.force)
        
        print()
        if success:
            print(message)
            
            # Optionally create example notebook
            if args.example:
                # Determine model type for example
                model_type = 'sklearn'  # default
                if response['requirements']['models']:
                    _, first_model, _ = response['requirements']['models'][0]
                    model_type = first_model
                
                nb_success, nb_msg = generator.create_example_notebook(
                    response['output_dir'], model_type
                )
                if nb_success:
                    print(f"\n{nb_msg}")
            
            # Show quick start command
            print("\nüöÄ Quick start:")
            print(f"   cd {response['output_dir']}")
            print("   nix develop")
            
            if args.example:
                print("   jupyter notebook example.ipynb")
        else:
            print(f"‚ùå {message}")
            sys.exit(1)
    else:
        print("Environment creation cancelled.")


if __name__ == "__main__":
    main()