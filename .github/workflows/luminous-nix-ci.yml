name: Luminous Nix CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Daily at 2 AM UTC for dependency checks
    - cron: '0 2 * * *'

env:
  POETRY_VERSION: '1.7.1'
  PYTHON_VERSION: '3.11'

jobs:
  # Quick validation checks
  validate:
    name: Validate Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Check Python syntax
        run: python -m py_compile src/**/*.py
      
      - name: Validate YAML files
        run: |
          pip install yamllint
          yamllint -d relaxed .github/

  # Linting and formatting
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        run: poetry install --with dev
      
      - name: Run Black formatter check
        run: poetry run black --check src/ tests/
      
      - name: Run Ruff linter
        run: poetry run ruff check src/ tests/
      
      - name: Run isort import checker
        run: poetry run isort --check-only src/ tests/
      
      - name: Type checking with mypy
        run: poetry run mypy src/ --ignore-missing-imports || true

  # Test suite
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
      
      - name: Install dependencies
        run: poetry install --with dev
      
      - name: Run unit tests
        run: |
          poetry run pytest tests/unit/ \
            --cov=src/luminous_nix \
            --cov-report=xml \
            --cov-report=term-missing \
            -v
      
      - name: Run integration tests
        run: |
          poetry run pytest tests/integration/ \
            -v --tb=short || true
      
      - name: Upload coverage
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests

  # Adaptive persona & learning tests
  consciousness-tests:
    name: Consciousness System Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
      
      - name: Install dependencies
        run: poetry install --with dev
      
      - name: Test adaptive personas
        run: poetry run python test_adaptive_personas.py
      
      - name: Test POML consciousness
        run: poetry run python test_consciousness.py || true
      
      - name: Test learning memory
        run: |
          poetry run pytest tests/unit/test_learning_memory.py -v || true

  # Security scanning
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r src/ -ll -f json -o bandit-report.json || true
      
      - name: Check for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
      
      - name: Dependency vulnerability scan
        run: |
          pip install safety
          poetry export -f requirements.txt | safety check --stdin || true

  # Performance benchmarking
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
      
      - name: Install dependencies
        run: poetry install --with dev
      
      - name: Run performance tests
        run: |
          poetry run pytest tests/benchmarks/ \
            --benchmark-only \
            --benchmark-json=benchmark.json || true
      
      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        if: github.ref == 'refs/heads/main'
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Build and package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
      
      - name: Build distributions
        run: |
          poetry build
          ls -la dist/
      
      - name: Check wheel contents
        run: |
          pip install check-wheel-contents
          check-wheel-contents dist/*.whl
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: distributions
          path: dist/

  # Integration with Ollama
  ollama-integration:
    name: Ollama Integration Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
      
      - name: Install dependencies
        run: poetry install
      
      - name: Start API server
        run: |
          poetry run python start_llm_api.py --port 8002 &
          sleep 5
      
      - name: Test API health
        run: |
          curl -f http://localhost:8002/health || exit 1
      
      - name: Test tool endpoints
        run: |
          curl -f http://localhost:8002/tools || exit 1
      
      - name: Run integration test
        run: |
          poetry run python test_ollama_flow.py || true

  # Release job
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, consciousness-tests, ollama-integration]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: distributions
          path: dist/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
          body: |
            ## ðŸŒŸ Luminous Nix Release
            
            ### âœ¨ Features
            - Adaptive persona system that learns from each user
            - Data Trinity integration for persistent memory
            - Ollama/LLM integration for natural language
            - Consciousness-first computing principles
            
            ### ðŸ“¦ Installation
            ```bash
            pip install luminous-nix
            ```
      
      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry publish --skip-existing