name: 🚀 Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  validate-version:
    name: ✅ Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
            # Check if it's a pre-release (contains alpha, beta, rc)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

          # Validate semantic versioning
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-z]+\.[0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: MAJOR.MINOR.PATCH or MAJOR.MINOR.PATCH-PRERELEASE.N"
            exit 1
          fi

          echo "✅ Version: $VERSION (Pre-release: $IS_PRERELEASE)"

      - name: 📋 Check version consistency
        run: |
          # Check pyproject.toml
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          if [ "$PYPROJECT_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "⚠️ Warning: pyproject.toml version ($PYPROJECT_VERSION) doesn't match tag (${{ steps.version.outputs.version }})"
          fi

          # Check __init__.py
          if [ -f "src/nix_for_humanity/__init__.py" ]; then
            INIT_VERSION=$(grep '__version__ = ' src/nix_for_humanity/__init__.py | cut -d'"' -f2)
            if [ "$INIT_VERSION" != "${{ steps.version.outputs.version }}" ]; then
              echo "⚠️ Warning: __init__.py version ($INIT_VERSION) doesn't match tag"
            fi
          fi

  run-tests:
    name: 🧪 Run Tests
    needs: validate-version
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1

      - name: 📦 Install dependencies
        run: poetry install --all-extras

      - name: 🧪 Run all tests
        run: |
          poetry run pytest -v --cov=nix_for_humanity
          poetry run mypy src/ --strict
          poetry run black --check src/ tests/ scripts/
          poetry run ruff check src/ tests/ scripts/

      - name: 🎭 Test all personas
        run: |
          echo "Testing critical paths for all 10 personas..."
          poetry run pytest tests/integration/test_persona_journeys.py -v || true

  build-package:
    name: 📦 Build Package
    needs: [validate-version, run-tests]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1

      - name: 🔨 Build distribution packages
        run: |
          # Update version in pyproject.toml if needed
          poetry version ${{ needs.validate-version.outputs.version }}

          # Build wheel and sdist
          poetry build

          # List built packages
          ls -la dist/

      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/

  create-release:
    name: 🎉 Create GitHub Release
    needs: [validate-version, build-package]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: 📝 Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"

          cat << EOF > release_notes.md
          # 🚀 Nix for Humanity v${VERSION}

          ## ✨ Highlights

          Natural language interface for NixOS - making NixOS accessible to everyone!

          ## 📦 Installation

          \`\`\`bash
          # Using pip (not recommended for NixOS)
          pip install nix-for-humanity==${VERSION}

          # Using Poetry (recommended)
          poetry add nix-for-humanity@${VERSION}

          # Using Nix flake
          nix run github:Luminous-Dynamics/nix-for-humanity/v${VERSION}
          \`\`\`

          ## 📋 What's Changed

          EOF

          # Add commit messages since last tag
          if git describe --tags --abbrev=0 HEAD^ 2>/dev/null; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^)
            git log --pretty=format:"- %s (%an)" ${LAST_TAG}..HEAD >> release_notes.md
          else
            echo "First release! 🎉" >> release_notes.md
          fi

          cat << EOF >> release_notes.md

          ## 🎭 Persona Impact

          This release has been tested with all 10 personas:
          - ✅ Grandma Rose (75, non-technical)
          - ✅ Maya (16, ADHD)
          - ✅ Viktor (67, ESL)
          - ✅ Dr. Sarah (35, researcher)
          - ✅ Alex (28, blind developer)
          - ✅ David (42, tired parent)
          - ✅ Luna (19, autistic)
          - ✅ Marcus (52, construction)
          - ✅ Raj (31, startup founder)
          - ✅ Elena (45, creative director)

          ## 📊 Quality Metrics

          - **Performance**: All operations under budget
          - **Accessibility**: WCAG AA compliant
          - **Coverage**: >90% test coverage
          - **Standards**: 100% compliance with project standards

          ## 🙏 Sacred Trinity

          Built with the Sacred Trinity development model:
          - Human vision & testing
          - AI architecture & implementation
          - Local LLM domain expertise

          ---

          *Making NixOS accessible through natural conversation* 🌊
          EOF

      - name: 🎉 Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.validate-version.outputs.version }}
          name: v${{ needs.validate-version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ needs.validate-version.outputs.is_prerelease }}
          files: |
            dist/*.whl
            dist/*.tar.gz

  publish-pypi:
    name: 📦 Publish to PyPI
    needs: [validate-version, create-release]
    runs-on: ubuntu-latest
    # Only publish stable releases to PyPI
    if: needs.validate-version.outputs.is_prerelease == 'false'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: 📦 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

  update-documentation:
    name: 📚 Update Documentation
    needs: [validate-version, create-release]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Update CHANGELOG
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          DATE=$(date +%Y-%m-%d)

          # Create new changelog entry
          cat << EOF > CHANGELOG_NEW.md
          ## [${VERSION}] - ${DATE}

          ### Added
          - See GitHub release for full details

          ### Changed
          - Version bump to ${VERSION}

          ### Fixed
          - See commit history

          ---

          EOF

          # Append existing changelog
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> CHANGELOG_NEW.md
            mv CHANGELOG_NEW.md CHANGELOG.md
          fi

      - name: 💾 Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add CHANGELOG.md
          git diff --staged --quiet || git commit -m "docs: update CHANGELOG for v${{ needs.validate-version.outputs.version }}"

          git push || echo "No changes to push"

  announce-release:
    name: 📢 Announce Release
    needs: [validate-version, create-release, publish-pypi]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📊 Generate summary
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"

          echo "# 🎉 Release v${VERSION} Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📦 Published Packages" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Release: ✅" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.publish-pypi.result }}" == "success" ]; then
            echo "- PyPI: ✅ [nix-for-humanity](https://pypi.org/project/nix-for-humanity/)" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.validate-version.outputs.is_prerelease }}" == "true" ]; then
            echo "- PyPI: ⏭️ Skipped (pre-release)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- PyPI: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Release Notes](https://github.com/${{ github.repository }}/releases/tag/v${VERSION})" >> $GITHUB_STEP_SUMMARY
          echo "- [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Sacred Trinity Release Process Complete* 🕉️" >> $GITHUB_STEP_SUMMARY
