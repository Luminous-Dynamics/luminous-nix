name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"
  NIX_HUMANITY_PYTHON_BACKEND: "true"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests
      run: |
        poetry run pytest tests/ -v --tb=short

    - name: Check code quality
      run: |
        poetry run python -m py_compile src/nix_for_humanity/*.py
        poetry run python -m py_compile src/nix_for_humanity/**/*.py

    - name: Test imports
      run: |
        poetry run python -c "from nix_for_humanity import NixForHumanityBackend; print('âœ… Imports work')"

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        pip install flake8 black isort mypy

    - name: Lint with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check formatting with black
      run: |
        black --check src/ || true

    - name: Check import sorting
      run: |
        isort --check-only src/ || true

    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports || true

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run security checks
      run: |
        pip install safety bandit
        safety check || true
        bandit -r src/ -ll || true

    - name: Check for secrets
      run: |
        # Check for potential secrets
        ! grep -r "sk-\|OPENAI\|GPT\|ANTHROPIC" src/ --exclude-dir=__pycache__
        ! grep -r "password\|secret\|token\|key" src/ | grep -v "IntentType\|# Example\|docstring"
