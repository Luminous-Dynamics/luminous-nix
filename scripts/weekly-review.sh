#!/usr/bin/env bash
# Weekly review script to track progress and adjust course
# Run this every week during the 6-week improvement sprint

set -euo pipefail

echo "üìÖ NIX FOR HUMANITY WEEKLY REVIEW"
echo "================================="
echo "Date: $(date '+%Y-%m-%d')"
echo ""

# Determine week number
START_DATE="2024-01-15"  # Adjust to your actual start date
CURRENT_DATE=$(date +%s)
START_TIMESTAMP=$(date -d "$START_DATE" +%s)
DAYS_ELAPSED=$(( ($CURRENT_DATE - $START_TIMESTAMP) / 86400 ))
WEEK_NUMBER=$(( ($DAYS_ELAPSED / 7) + 1 ))

echo "Sprint Week: $WEEK_NUMBER of 6"
echo ""

# Run progress dashboard
echo "üìä Running progress analysis..."
python scripts/progress-dashboard.py

# Check functionality
echo -e "\nüîç Functionality check..."
if [ -f "scripts/functionality-check.sh" ]; then
    ./scripts/functionality-check.sh | grep -E "(WORKING|NOT WORKING|PARTIALLY)" | head -10
fi

# Test results summary
echo -e "\nüß™ Test summary..."
if command -v pytest >/dev/null 2>&1; then
    pytest tests/ -q --tb=no 2>/dev/null | tail -5 || echo "  ‚ö†Ô∏è  Tests failed to run"
fi

# Git statistics
echo -e "\nüìà Development activity (this week)..."
COMMITS_THIS_WEEK=$(git log --since="1 week ago" --oneline 2>/dev/null | wc -l || echo "0")
FILES_CHANGED=$(git diff --stat HEAD~$COMMITS_THIS_WEEK 2>/dev/null | tail -1 || echo "No changes")
echo "  Commits: $COMMITS_THIS_WEEK"
echo "  $FILES_CHANGED"

# Check for scope creep
echo -e "\nüö´ Scope creep check..."
NEW_FEATURES=$(git log --since="1 week ago" --oneline 2>/dev/null | grep -iE "(new feature|add support|implement new)" | wc -l || echo "0")
if [ "$NEW_FEATURES" -gt 0 ]; then
    echo "  ‚ö†Ô∏è  Warning: $NEW_FEATURES commits mention new features!"
    echo "  Remember: Feature freeze is active!"
else
    echo "  ‚úÖ No new features detected"
fi

# Performance validation
echo -e "\n‚ö° Performance check..."
if [ -f "PERFORMANCE_VALIDATION.md" ]; then
    VALIDATED=$(grep -c "‚úÖ" PERFORMANCE_VALIDATION.md 2>/dev/null || echo "0")
    echo "  Validated claims: $VALIDATED"
else
    echo "  ‚ö†Ô∏è  No performance validation found"
    echo "  Run: python scripts/validate-performance.py"
fi

# Week-specific goals
echo -e "\nüéØ Week $WEEK_NUMBER Goals:"
case $WEEK_NUMBER in
    1|2)
        echo "  - Clean up project structure ‚úì"
        echo "  - Consolidate backends"
        echo "  - Fix basic command reliability"
        echo "  - Set up real tests"
        ;;
    3|4)
        echo "  - Complete native API integration"
        echo "  - Wire up TUI"
        echo "  - Activate learning system"
        echo "  - Achieve 90%+ command success"
        ;;
    5|6)
        echo "  - Polish all features"
        echo "  - Complete documentation"
        echo "  - Performance optimization"
        echo "  - Prepare for release"
        ;;
    *)
        echo "  Sprint complete! Time to ship üöÄ"
        ;;
esac

# Action items
echo -e "\nüìù Recommended actions for next week:"

# Generate personalized recommendations based on progress
if [ -f "metrics/progress.json" ]; then
    python3 -c "
import json
with open('metrics/progress.json', 'r') as f:
    data = json.load(f)
    if data:
        latest = data[-1]
        
        # Priority recommendations based on scores
        if latest['structure']['score'] < 7:
            print('  1. Run ./scripts/reorganize-project.sh - Fix structure first!')
        elif latest['code_quality']['score'] < 7:
            print('  1. Consolidate backends - Too much duplication')
        elif latest['test_health']['score'] < 7:
            print('  1. Replace mocks with real tests - Current tests are fake')
        elif latest['documentation']['score'] < 7:
            print('  1. Update docs to match reality - Too much fantasy')
        else:
            print('  1. Focus on remaining issues and polish')
            
        # Always recommend these
        print('  2. Fix highest-impact bugs')
        print('  3. Run performance validation')
        print('  4. Update progress tracking')
"
fi

# Create weekly report file
REPORT_FILE="reports/week-${WEEK_NUMBER}-review.md"
mkdir -p reports

cat > "$REPORT_FILE" << EOF
# Week $WEEK_NUMBER Review - Nix for Humanity

**Date**: $(date '+%Y-%m-%d')  
**Sprint Progress**: Week $WEEK_NUMBER of 6

## Summary

- **Overall Score**: Check metrics/dashboard.html
- **Commits This Week**: $COMMITS_THIS_WEEK
- **New Features Added**: $NEW_FEATURES (should be 0!)

## Accomplishments

_Fill in what was completed this week_

## Blockers

_List any impediments to progress_

## Next Week Goals

_Based on the automated recommendations above_

## Notes

_Any additional observations or decisions_

---
Generated by weekly-review.sh
EOF

echo -e "\nüìÑ Report saved to: $REPORT_FILE"
echo ""
echo "üéØ Remember: Focus on making existing features work perfectly!"
echo "   No new features until the basics are solid!"
echo ""
echo "‚úÖ Weekly review complete. Stay focused, ship quality!"